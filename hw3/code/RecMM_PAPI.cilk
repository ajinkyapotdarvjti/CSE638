#include <iostream>
#include <fstream>
#include <sys/time.h>
#include <cstdlib>
#include <string>
#include "papi.h"

#define NUM_EVENTS 1
#define ERROR_RETURN(retval) { fprintf(stderr, "Error %d %s:line %d: \n", retval,__FILE__,__LINE__);  exit(retval); }

using namespace std;

int n = 1;
int m = 1;

void iter_MM(int *x, int *y, int *z, int startxr, int startxc, int startyr, int startyc, int startzr, int startzc, int size) {
	for(int i=0; i<size; i++) {
		for(int k=0; k<size; k++) {
			for(int j=0; j<size; j++) {
				z[n*(startzr + i) + (startzc + j)] += x[n*(startxr + i) + (startxc + k)] * y[n*(startyr + k) + (startyc + j)];
			}
		}
	}
}

void rec_MM(int *x, int *y, int *z, int startxr, int startxc, int startyr, int startyc, int startzr, int startzc, int size) {
	//cout << "size = " << size << endl;

	if(size <= m) {
		iter_MM(x, y, z, startxr, startxc, startyr, startyc, startzr, startzc, size);
	} else {

		rec_MM(x, y, z, startxr, startxc, startyr, startyc, startzr, startzc, size/2);
		rec_MM(x, y, z, startxr, startxc+size/2, startyr+size/2, startyc, startzr, startzc, size/2);

		rec_MM(x, y, z, startxr, startxc, startyr, startyc+size/2, startzr, startzc+size/2, size/2);
		rec_MM(x, y, z, startxr, startxc+size/2, startyr+size/2, startyc+size/2, startzr, startzc+size/2, size/2);

		rec_MM(x, y, z, startxr+size/2, startxc, startyr, startyc, startzr+size/2, startzc, size/2);
		rec_MM(x, y, z, startxr+size/2, startxc+size/2, startyr+size/2, startyc, startzr+size/2, startzc, size/2);

		rec_MM(x, y, z, startxr+size/2, startxc, startyr, startyc+size/2, startzr+size/2, startzc+size/2, size/2);
		rec_MM(x, y, z, startxr+size/2, startxc+size/2, startyr+size/2, startyc+size/2, startzr+size/2, startzc+size/2, size/2);

	}
}

void display(int *M, int startr, int startc, int size) {

	// initializing X in row major order
	for(int i=0; i<size; i++) {
		for(int j=0; j<size; j++) {
			cout << M[n*(startr + i) + (startc + j)] << " ";
		}
		cout << endl;
	}

	cout << "---------------" << endl;
}

int cilk_main(int argc, char* argv[]) {

	n = atoi(argv[1]);
	m = atoi(argv[2]);
	int parameter =  atoi(argv[3]);

	int size = n;

	int *X = new int[size*size];
	int *Y = new int[size*size];
	int *Z = new int[size*size];
	int *X_Z = new int[size*size];
	int *Y_Z = new int[size*size];
	int *Z_Z = new int[size*size];

	// initializing X in row major order
	for(int i=0; i<size; i++) {
		for(int j=0; j<size; j++) {
			X[size*i +j] = size*i + j;
		}
	}

	// initializing Y in row major order
	for(int i=0; i<size; i++) {
		for(int j=0; j<size; j++) {
			Y[size*i +j] = i + j;
		}
	}

	// initializing Z in row major order
	for(int i=0; i<size; i++) {
		for(int j=0; j<size; j++) {
			Z[size*i + j] = 0;
		}
	}

	int retval;
	int EventSet = PAPI_NULL;
	int eventCode = 0;
	char errstring[PAPI_MAX_STR_LEN];
	long long values[NUM_EVENTS];
	string parameter_name[4] = {"L1 Cache misses", "L2 Cache misses", "L3 Cache misses", "Number of Instructions"};

	if((retval = PAPI_library_init(PAPI_VER_CURRENT)) != PAPI_VER_CURRENT )
	{
		fprintf(stderr, "Error: %s\n", errstring);
		exit(1);
	}

	if ((retval=PAPI_create_eventset(&EventSet)) != PAPI_OK)
		ERROR_RETURN(retval);

	switch(parameter) {
		case 1:
			eventCode = PAPI_L1_DCM;
			break;

		case 2:
			eventCode = PAPI_L2_DCM;
			break;

		case 3:
			eventCode = PAPI_L3_DCM;
			break;

		case 4:	
			eventCode = PAPI_TOT_INS;
			break;
	};

	if ((retval=PAPI_add_event(EventSet, eventCode)) != PAPI_OK)
		ERROR_RETURN(retval);

	if ( (retval=PAPI_start(EventSet)) != PAPI_OK)
		ERROR_RETURN(retval);

        // -------------------- measurement begins -------------------------------

	rec_MM(X, Y, Z, 0, 0, 0, 0, 0, 0, size);

        // -------------------- measurement ends -------------------------------

	/* Stop counting, this reads from the counter as well as stop it. */
	if ( (retval=PAPI_stop(EventSet,values)) != PAPI_OK)
		ERROR_RETURN(retval);

	cout << "Rec MM, " << parameter_name[parameter-1] << " = " << values[0] << " for m = " << m << ", n = " << n << endl;

	if ( (retval=PAPI_remove_event(EventSet, eventCode))!=PAPI_OK)
		ERROR_RETURN(retval);

	/* Free all memory and data structures, EventSet must be empty. */

	if ( (retval=PAPI_destroy_eventset(&EventSet)) != PAPI_OK)
		ERROR_RETURN(retval);

	/* free the resources used by PAPI */

	PAPI_shutdown();

	//display(Z, 0, 0, size);
	return 0;
}

